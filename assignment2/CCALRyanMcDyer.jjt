//Ryan McDyer
//13431038

options {
  JAVA_UNICODE_ESCAPE = true;
  IGNORE_CASE = true;
  NODE_DEFAULT_VOID = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(CCAL)

import java.util.*;
import java.io.*;

public class CCAL {

  public static Hashtable ST = new Hashtable();

  public static void main(String args[]) throws ParseException {

    CCAL    parser;

    String  temp;
    STC     temp2;

    if (args.length == 0) {
      System.out.println("Reading from standard input . . .");
      parser = new CCAL(System.in);
    } else if (args.length == 1) {
      try {
        parser = new CCAL(new java.io.FileInputStream(args[0]));

        SimpleNode root = parser.program();

        System.out.println("Abstract Syntax Tree:");
        root.dump(" ");

        System.out.println();
        System.out.println("Symbol Table:");
        Enumeration t = ST.keys();

        while (t.hasMoreElements()) {
          temp = (String)t.nextElement();
          temp2 = (STC)ST.get(temp);
          System.out.println(temp);
          if ( temp2.type != null )
          System.out.println(" type = " + temp2.type);
          if ( temp2.value != null )
          System.out.println(" value = " + temp2.value);
        }


/*
        System.out.println();
        System.out.println("Program:");
        PrintVisitor pv = new PrintVisitor();
        root.jjtAccept(pv, null);

        System.out.println();
        System.out.println("Type Checking:");
        TypeCheckVisitor tc = new TypeCheckVisitor();
        root.jjtAccept(tc, ST);    */

      } catch (java.io.FileNotFoundException e) {
        System.err.println("File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Usage is one of:");
      System.out.println(" java CCAL");
      System.out.println("OR");
      System.out.println(" java CCAL inputfile");
      return;
    }
  }
}
PARSER_END(CCAL)


/*****************************************
************ TOKEN DEFINITIONS ***********
*****************************************/
TOKEN_MGR_DECLS :
{
  static int commentNesting = 0;
}
SKIP : /*** Ignoring whitespaces ***/
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}
SKIP : // COMMENTS, taken from lth.se
{
  < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}
SKIP : /* COMMENTS */
{
  <"/*"> { commentNesting++; } : IN_COMMENT
}
<IN_COMMENT> SKIP :
{
  <"/*"> { commentNesting++; }
  | <"*/"> { commentNesting--;
    if (commentNesting == 0)
      SwitchTo(DEFAULT);
  }
  | <~[]>
}
<DEFAULT> SKIP : //The string "SKIP"
{
  <SKIP_STRING>
}

TOKEN : /* Keywords */
{
  < VAR : "var" >
  | < CONST : "const" >
  | < RETURN : "return" >
  | < INTEGER : "integer" >
  | < BOOLEAN : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKIP_STRING : "skip" >
}
TOKEN : /* Other reserved tokens*/
{
  < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
  | < LBRACE : "{" >
  | < RBRACE : "}" >
  | < LPAREN : "(" >
  | < RPAREN : ")" >
}
TOKEN : /* Operators */
{
  < ASSIGN : "=" >
  | < PLUS_SIGN : "+" >
  | < MINUS_SIGN : "-" >
  | < NEGATION : "~" >
  | < OR : "||" >
  | < AND : "&&" >
  | < EQUALTO : "==" >
  | < NOTEQUALTO : "!=" >
  | < LESSTHAN : "<" >
  | < LESSTHANEQUALS : "<=" >
  | < GREATERTHAN : ">" >
  | < GREATERTHANEQUALS : ">=" >
}
TOKEN : /* Numbers and IDs */
{
  < NUMBER : <DIGIT>
    | <NONZERO> (<DIGIT>)*
    | <MINUS_SIGN> <DIGIT>
    | <MINUS_SIGN> <NONZERO> (<DIGIT>)* >
  | < #DIGIT : ["0" - "9"] >
  | < #NONZERO : ["1" - "9"] >
  | < ID : (<LETTER>)(<LETTER> | "_" | <DIGIT>)* >
  | < #LETTER : ["a" - "z", "A" - "Z"] >
}
TOKEN : /* Anything else */
{
  < OTHER : ~[] >
}
/***********************************
************ THE GRAMMAR ***********
***********************************/
SimpleNode program() #PROGRAM : {}//(1)
{
  decl_list() function_list() main() <EOF> { return jjtThis; }
}

void decl_list() : {}//(2)
{
  (decl())*
}

void decl() : {}//(3)
{
  (var_decl() | const_decl()) <SEMIC>
}

void var_decl() #VAR : {}//(4)
{
  <VAR> <ID><COLON>type()
}

void const_decl() #CONST : {}//(5)
{
  <CONST> <ID><COLON>type() <ASSIGN> expression()
}

void function_list() : {}//(6)
{
  (function())*
}

void function() #FUNCTION : {}//(7)
{
  type() <ID> <LPAREN> parameter_list() <RPAREN>
  <LBRACE>
    decl_list()
    statement_block()
    <RETURN> <LPAREN> [expression()] <RPAREN> <SEMIC>
  <RBRACE>
}

void type() #TYPE : {}//(8)
{
  <INTEGER> { jjtThis.value = token; }
  | <BOOLEAN> { jjtThis.value = token; }
  | <VOID> { jjtThis.value = token; }
}

void parameter_list() : {}//(9)
{
  (nemp_parameter_list())*
}

void nemp_parameter_list() : {}//(10)
{
  <ID><COLON>type() [<COMMA> nemp_parameter_list()]
}

void main() #MAIN : {}//(11)
{
  <MAIN> <LBRACE>
    decl_list()
    statement_block()
  <RBRACE>
}

void statement_block() : {}//(12)
{
  [statement() statement_block()]
}

void statement() #STATEMENT : {}//(13)
{
  <ID> statement2()
  | <LBRACE> statement_block() <RBRACE>
  | <IF> condition()
    <LBRACE> statement_block() <RBRACE>
    <ELSE>
    <LBRACE> statement_block() <RBRACE>
  | <WHILE> condition()
    <LBRACE> statement_block() <RBRACE>
  | <SKIP_STRING> <SEMIC>
}

void statement2() : {}//(13a)
{
  <ASSIGN> expression() <SEMIC>
  | <LPAREN> arg_list() <RPAREN> <SEMIC>
}

void expression() : {}//(14)
{
  LOOKAHEAD(2)
  <ID> <LPAREN> arg_list() <RPAREN> optional_expression_bin_op()
  | fragment() optional_expression_bin_op()
  | <LPAREN> expression() <RPAREN> optional_expression_bin_op()
}

void optional_expression_bin_op() : {}//(14a)
{
    (binary_arith_op() fragment())?
}

void binary_arith_op() #MATH_OP : {}//(15)
{
  <PLUS_SIGN> { jjtThis.value = token; }
  | <MINUS_SIGN> { jjtThis.value = token; }
}

void fragment() #FRAGMENT : {}//(16)
{
  <ID> { jjtThis.value = token; }
  | <MINUS_SIGN> <ID>
  | <NUMBER> { jjtThis.value = token; }
  | <TRUE> { jjtThis.value = token; }
  | <FALSE> { jjtThis.value = token.image; }
}

void condition() : {}//(17)
{
  <NEGATION> condition() optional_condition_bin_op()
  | LOOKAHEAD(3)
    <LPAREN> condition() <RPAREN> optional_condition_bin_op()
  | expression() comp_op() expression() optional_condition_bin_op()
}

void optional_condition_bin_op() : {}//(17a)
{
  (LOOKAHEAD(2)
    binary_logical_op() condition())?
}

void binary_logical_op() #LOGIC_OP: { Token t; }//(17b)
{
  <OR> { jjtThis.value = token; }
  | <AND> { jjtThis.value = token; }
}

void comp_op() #COMP_OP : { Token t; }//(18)
{
  <EQUALTO> { jjtThis.value = token; }
  | <NOTEQUALTO> { jjtThis.value = token; }
  | <LESSTHAN> { jjtThis.value = token; }
  | <LESSTHANEQUALS> { jjtThis.value = token; }
  | <GREATERTHAN> { jjtThis.value = token; }
  | <GREATERTHANEQUALS> { jjtThis.value = token; }
}

void arg_list() : {}//(19)
{
  (nemp_arg_list())*
}

void nemp_arg_list() : {}//(20)
{
  <ID> [<COMMA> nemp_arg_list()]
}
