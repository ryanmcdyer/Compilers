/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { JAVA_UNICODE_ESCAPE = true; }

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

/*
PARSER_BEGIN(BASICLTokeniser)

public class BASICLTokeniser 
{
	public static void main(String args[]) 
	{
		BASICLTokeniser tokeniser;
		if(args.length == 0) 
		{
			System.out.println("Reading from standard input . . .");
			tokeniser = new BASICLTokeniser(System.in);
		}else if (args.length == 1) 
		{
			try 
			{
				tokeniser = new BASICLTokeniser(new java.io.FileInputStream(args[0]));
			}catch(java.io.FileNotFoundException e) 
			{
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else 
		{
			System.out.println("SLP Tokeniser:  Usage is one of:");
			System.out.println("         java BASICLTokeniser < inputfile");
			System.out.println("OR");
			System.out.println("         java BASICLTokeniser inputfile");
			return;
		}
		/*
		* Weâ€™ve now initialised the tokeniser to read from the appropriate place,
		* so just keep reading tokens and printing them until we hit EOF
		
		for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) 
		{
		// Print out the actual text for the constants, identifiers etc.
			if (t.kind==NUM)
			{
				System.out.print("NUM");
				System.out.print("("+t.image+") ");
			}
			else if (t.kind==ID)
			{
				System.out.print("ID");
				System.out.print("("+t.image+") ");
			}
			else
				System.out.print(t.image+" ");
		}
	}
}
PARSER_END(BASICLTokeniser)
*/

PARSER_BEGIN(BASICLInterpreter)

public class BASICLInterpreter 
{
	public static void main(String args[]) 
	{
		BASICLInterpreter interpreter;
		if (args.length == 0) 
		{
			System.out.println("BASICL Interpreter:  Reading from standard input...");
			interpreter = new BASICLInterpreter(System.in);
		} 
		else if (args.length >= 1) 
		{
			System.out.println("BASICL Interpreter:  Reading from file " + args[0] + "...");
			try 
			{
				interpreter = new BASICLInterpreter(new java.io.FileInputStream(args[0]));
			} 
			catch (java.io.FileNotFoundException e) 
			{
				System.out.println("BASICL Interpreter:  File " + args[0] + " not found.");
				return;
			}
		} 
		else 
		{
			System.out.println("BASICL Interpreter:  Usage is one of:");
			System.out.println("         java BASICLInterpreter < inputfile");
			System.out.println("OR");
			System.out.println("         java BASICLInterpreter inputfile [OPTION]");
			System.out.println("[OPTION]");
			System.out.println("         -L : Lexical Analysis of input file");
			return;
		}
		if (args.length == 2)
		{
			if(args[1].equals("-L"))
			{
				System.out.println("------------------------------------------");
				System.out.println("-------------Lexical Analysis-------------");
				System.out.println("------------------------------------------");
				for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) 
				{
				// Print out the actual text for the constants, identifiers etc.
					if (t.kind==NUM)
					{
						System.out.print("NUM");
						System.out.print("("+t.image+") ");
					}
					else if (t.kind==ID)
					{
						System.out.print("ID");
						System.out.print("("+t.image+") ");
					} 
					else if (t.kind==OTHER)
					{
						System.out.print("Not recognised");
						System.out.print("("+t.image+") ");
					}
					else
						System.out.print(t.image+" ");
				}
			}else{
				System.out.println("BASICL Interpreter:  Usage is one of:");
				System.out.println("         java BASICLInterpreter < inputfile");
				System.out.println("OR");
				System.out.println("         java BASICLInterpreter inputfile [OPTION]");
				System.out.println("[OPTION]");
				System.out.println("         -L : Lexical Analysis of input file");
			}	
		}else 
		{
			try 
			{
				interpreter.Program();
				System.out.println("BASICL Interpreter: File parse succesfull!");
			} 
			catch (ParseException e) 
			{
				System.out.println(e.getMessage());
				System.out.println("BASICL Interpreter:  Encountered errors during parse.");
			}
		}	
	}
}

PARSER_END(BASICLInterpreter)

/****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
****************************************/

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */
{
		<"--" (["a" - "z"] | ["A" - "Z"] | ["0" - "9"] | " ")* ("\n" | "\r" |"\r\n")>
	|	"/*" { commentNesting++; } : IN_COMMENT
	
}

<IN_COMMENT> SKIP :
{
		"/*" { commentNesting++; }
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
			}
	| <~[]>
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
		" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /* Keywords */ 
{
		<AND : "and">
	|	<BOOL : "bool">
	|	<CONST : "const">
	|	<DO : "do">
	|	<ELSE : "else">
	|	<FALSE : "false">
	|	<IF : "if">
	|	<INT : "int">
	| <DOUBLE: "double">
	| <MAIN : "main">
	|	<NOT : "not">
	| <OR : "or">
	|	<RETURN : "return">
	| <THEN : "then">
	|	<TRUE : "true">
	| <VAR : "var">
	| <VOID : "void">
	| <WHILE : "while">
	|	<BEGIN : "begin">
	| <END : "end">
}

 TOKEN : /* Identifiers */
 {
		<ID : <CHAR> (<DIGIT> | <CHAR> | "_" )* >
 	|	<#CHAR : ["a" - "z"] | ["A" - "Z"]>
 }

TOKEN : /* Numbers */
{
		<NUM : (<DIGIT>)+>
	|	<REAL: ( (<DIGIT>)+ "." (<DIGIT>)*) | ((<DIGIT>)* "." (<DIGIT>)+) >
	|	<#DIGIT : ["0" - "9"]>
}

TOKEN : /* Operators and Relations */
{
		<PLUS_SIGN : "+">
	|	<MINUS_SIGN : "-">
	|	<MULT_SIGN : "*">
	|	<DIV_SIGN : "/">
	|	<EQUALS_SIGN : "=">
	| <NOT_EQUALS_SIGN : "!=">
	|	<LESS_THAN : "<">
	| <GREATER_THAN : ">">
	|	<LESS_THAT_EQUALS : "<=">
	| <GREATER_THAN_EQUALS : ">=">
	|	<LEFT_BRACKET : "(">
	|	<RIGHT_BRACKET : ")">
	|	<COMMA : ",">
	|	<SEMICOLON : ";">
	|	<TYPE_ASSIGN : ":">
	|	<ASSIGN : ":=">
}

TOKEN : /* Anything not recognised so far */
{
	< OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

void Program() : {}
{
	( Decl() )* // fix due to it decl already being declared one or more times no need to re-declare one or more (*)
	( Function() )*
	Main_Prog()
}

void Decl() : {}
{
	( Var_decl() | Const_decl() ) 
}

void Var_decl() : {}
{
	<VAR> Ident_list() <TYPE_ASSIGN> Type() ( <COMMA> Ident_list() <TYPE_ASSIGN> Type() )* <SEMICOLON>
}

void Const_decl() : {}
{
	( <CONST> <ID> <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() ( <COMMA> <ID> <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() )* <SEMICOLON>)
}

void Function() : {}
{
	( Type() <ID> <LEFT_BRACKET> Param_list() <RIGHT_BRACKET> )
	<BEGIN>
	( Decl() )* 
	( Statment() <SEMICOLON> ) *
	(<RETURN> ( Expression() | {} ) <SEMICOLON>)
	<END>
}

void Param_list() : {}
{
	( <ID> <TYPE_ASSIGN> Type() ( <COMMA> <ID> <TYPE_ASSIGN> Type() )* | {})
}

void Type() : {}
{
		<INT>
	| <DOUBLE>
	|	<BOOL>
	|	<VOID>
}

void Main_Prog() : {}
{
	<MAIN>
	<BEGIN>
	( Decl() )*
	( Statment() <SEMICOLON>)*
	<END>
}

void Statment() : {}
{
		<ID> (<ASSIGN> Expression() | Arg_list() ) 
	|	<BEGIN> ( Statment() <SEMICOLON> )* <END>
	|	<IF> Condition() <THEN> Statment() <SEMICOLON> <ELSE> Statment()
	|	<WHILE> Condition() <DO> Statment()
	| {} // this will allow you to just stick aload of semicolons in the file and will parse correctly !!!
}


void Expression() : {}
{
		<ID> [ Arg_list() ] Expression1() | Fragment() Expression1()
}

void Expression1() : {}
{
	Opp() Expression() | {}
}

void Opp() : {}
{
	<PLUS_SIGN> | <MINUS_SIGN> | <MULT_SIGN> | <DIV_SIGN>
}

void Fragment() : {}
{

		<TRUE>
	|	<FALSE>
	|	<NUM>
	| <REAL>
	| <LEFT_BRACKET> Expression() <RIGHT_BRACKET>
}

void BoolOpp() : {}
{
		<EQUALS_SIGN> 
	| <NOT_EQUALS_SIGN> 
	| <LESS_THAN> 
	| <GREATER_THAN> 
	| <GREATER_THAN_EQUALS> 
	| <LESS_THAT_EQUALS> 
	| <AND> 
	| <OR>
}


void Condition() : {}
{
		<NOT> Condition()
	| [<LEFT_BRACKET>] Expression() ( ( BoolOpp() ) Expression()  [<RIGHT_BRACKET>] ) *
}

void Ident_list() : {}
{
	<ID> ( <COMMA> <ID> )*
}

void Arg_list() : {}
{
	<LEFT_BRACKET> (<ID> ( <COMMA> <ID>)*  | {}) <RIGHT_BRACKET>
}
